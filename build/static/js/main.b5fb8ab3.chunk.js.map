{"version":3,"sources":["Components/Home/Home.jsx","Actions/Actions.jsx","Utils/Utils.js","Components/Parameters/Parameters.jsx","Components/ColorPicker/ColorPicker.jsx","Components/Chipcase/Chipcase.jsx","Components/Navigation/Navigation.jsx","Components/ChipsetComponent/ChipsetComponent.jsx","Components/ChipsetBuilder/ChipsetBuilder.jsx","App.jsx","Reducers/chipSetBuildReducer.jsx","Reducers/chipsetGenerationReducer.jsx","Reducers/generateStacksReducer.jsx","Reducers/maxPlayerReducer.jsx","Reducers/enableTouchReducer.jsx","Reducers/setTotalReducer.jsx","Reducers/extraRulesReducer.jsx","Reducers/setRecaveReducer.jsx","Reducers/changeColorDataReducer.jsx","index.jsx"],"names":["Home","react_default","a","createElement","reactstrap_es","className","md","tag","react_router_dom","to","outline","color","src","alt","Component","MORECHIPS","LESSCHIPS","changePickerColorAction","type","isMultipleTwentyFive","chips","Math","ceil","removeUnusedChips","chipValues","minChip","shift","setStateChips","chipCounts","state","Object","objectSpread","chipOne","chipTwo","chipThree","chipFour","chipFive","nbrChipOne","nbrChipTwo","nbrChipThree","nbrChipFour","nbrChipFive","totalStack","totalChips","i","length","colorChips","value","colorOne","colorTwo","addonsDistributionChipcase","addonsChips","props","colorUp","nbrChip","addons","maxPlayers","extraRules","maxRebuys","maxAddons","Parameters","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","totalChipset","checkedRecave","setTotalChipset","toggleModal","setState","modal","toggleMinChipInput","prevState","dropdownOpenMinChip","toggleStartingStackInput","dropdownOpenStartingStack","handleChangeChips","e","floor","Number","target","setExtraRules","handleChangeStartingStack","handleGenerateChipset","handleGenerateStacks","handleChangeMinChip","handleGeneratePossibleStacks","handleChangeColorMinChip","changeMaxPlayers","handleChangeMaxPlayers","startingStack","placeholder","changeMaxRebuys","handleChangeMaxRebuys","handleChangeRecave","checked","setRecave","handleChangeMaxRebuysValue","handleChangeMaxAddonsValue","handleChangeAddonsChipsValue","handleChangeMaxAddons","handleChangeAddonsChips","minChipOptions","_this2","char","String","fromCharCode","which","test","preventDefault","_this3","xs","for","htmlFor","react_switch_default","onChange","onColor","onHandleColor","handleDiameter","uncheckedIcon","checkedIcon","boxShadow","activeBoxShadow","height","width","id","onKeyPress","isInputNumber","name","onClick","size","isOpen","toggle","caret","map","chip","index","key","modifiers","setMaxHeight","enabled","order","fn","data","styles","overflow","maxHeight","possibleStack","stack","concat","disabled","dark","handleClickLessChips","handleClickMoreChips","data-dismiss","aria-label","aria-hidden","href","rel","role","mapActionsToProps","payload","selectStack","connect","store","settings","chipset","ColorPicker","handleClickPicker","displayColorPicker","enableSidebarTouch","handleClosePicker","indexMinChip","y","colors","toggleColorPicker","sm","lg","style","background","lib","handleChangeFirstColor","handleChangeSecondColor","Chipcase","drawCanvas","canvas","refs","ctx","getContext","clientWidth","clientHeight","clearRect","fillStyle","save","fillRect","font","textAlign","fillText","heightColumns","coinY","valueY","startColumn","recave","setRatioColumn","colorData","box","generateChip","generateChipColumn","generateValue","generateNrValue","color1","color2","x","widthPixel","heightPixel","heightChips","positionX","positionY","toString","color3","startPosition","startPosition2","rayCircle","rayBorder","generateChipCenter","generateFirstBorderColor","startBorder","endBorder","beginPath","strokeStyle","arc","PI","lineWidth","stroke","generateSecondBorderColor","fill","closePath","hex","handleChangeColorDataPicker","biggestPile","heightColumn","nextProps","Components_ColorPicker_ColorPicker","ref","window","mapActionToProps","Navigation","light","expand","ChipsetComponent","coinX","generateChipValue","onSetSidebarOpen","ChipsetBuilder","open","sidebarOpen","react_sidebar_esm","sidebar","Components_ChipsetComponent_ChipsetComponent","onSetOpen","touch","enableTouch","Components_Navigation_Navigation","Components_Parameters_Parameters","Components_Chipcase_Chipcase","enabletouch","App","fluid","react_router","exact","path","component","chipSetBuildReducer","arguments","undefined","_ref","getChipValueArray","push","getChipCountArray","setTargetPile","columnRatio","ratio","chipsetGenerationReducer","remainingChips","chipIndex","chipRatio","currentValue","initStackDistribution","moreChips","addMoreChips","lessChips","limitFirstChip","limitSecondChip","removeChips","generateStacksReducer","interval","dataStack","setPossibleStack","maxPlayerReducer","enableTouchReducer","Boolean","setTotalReducer","extraRulesReducer","setRecaveReducer","changeColorDataReducer","allReducers","combineReducers","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b5fb8ab3.chunk.js","sourcesContent":["import React,{ Component } from 'react';\nimport './Home.css';\nimport { Row, Col, Button } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nclass Home extends Component {\n\n  render() {\n    return(\n      <div>\n        <Row className=\"d-flex justify-content-center align-items-center home-page\">\n          <Col md={12}>\n            <h3 className=\"text-home\">Create your poker chipset in minutes for your future game.</h3>\n          </Col>\n          <Col tag=\"div\" md={12}>\n            <Link tag=\"a\" to=\"/chipsetBuilder\">\n              <Button className=\"btn-start\" outline color=\"warning\">Get Started</Button>\n            </Link>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col md={12}>\n            <img className=\"image-background\" src={process.env.PUBLIC_URL+'/assets/images/poker.jpg'} alt=\"Quinte Poker\"/>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Home;","export const SELECTMINCHIP = \"settings: selectMinChipAction\";\nexport const SELECTSTARTINGSTACK = \"settings: selectStartingStackAction\";\nexport const GENERATESTACKS = \"possiblestack: generatePossibleStackAction\";\nexport const GENERATECHIPSET = \"chipset: generateChipsetAction\";\nexport const SELECTMAXPLAYERS = \"settings: selectMaxPlayersAction\";\nexport const MORECHIPS = \"addchips: selectMoreChipsAction\";\nexport const LESSCHIPS = \"removechips: selectLessChipsAction\";\nexport const ENABLETOUCH= \"enabletouch: enableTouchAction\";\nexport const TOTALCHIPSET = \"settotal: setTotalChipsetAction\";\nexport const SETEXTRARULES = \"setextrarules : setExtraRulesAction\";\nexport const SETRECAVE = \"setrecave : setRecaveAction\";\nexport const DATACOLORMINCHIP = \"colordata : changeMinchipColorAction\";\nexport const DATACOLORPICKER = \"colordata : changePickerColorAction\";\n\n\nexport const selectMinChipAction = (minChip) => {\n  return{\n    type : SELECTMINCHIP,\n    payload : {\n      minChip : minChip\n    }\n  };\n};\n\nexport const generatePossibleStacksAction = (minChip) => {\n  return{\n    type : GENERATESTACKS,\n    payload : {\n      minChip : minChip\n    }\n  };\n};\n\nexport const selectStartingStackAction = (selectStack, minChip) => {\n  return{\n    type : SELECTSTARTINGSTACK,\n    payload : {\n      startingStack : selectStack,\n      minChip : minChip\n    }\n  };\n};\n\nexport const generateChipsetAction = (startingStack , minChip) => {\n  return{\n    type : GENERATECHIPSET,\n    payload : {\n      startingStack : startingStack,\n      minChip : minChip\n    }\n  };\n};\n\nexport const selectMaxPlayersAction = (maxPlayers) => {\n  return{\n    type : SELECTMAXPLAYERS,\n    payload : {\n      maxPlayers : maxPlayers\n    }\n  };\n};\n\nexport const selectMoreChipsAction = () => {\n  return{\n    type : MORECHIPS\n  };\n};\n\nexport const selectLessChipsAction = () => {\n  return{\n    type : LESSCHIPS\n  };\n};\n\nexport const enableTouchAction = () => {\n  return {\n    type: ENABLETOUCH\n  };\n};\n\nexport const setTotalChipsetAction = (totalChipset) => {\n  return{\n    type : TOTALCHIPSET,\n    payload: {\n      totalChipset: totalChipset\n    }\n  };\n};\n\nexport const setExtraRulesAction = (maxRebuys, addonsChips, maxAddons) => {\n  return{\n    type : SETEXTRARULES,\n    payload: {\n      maxRebuys: maxRebuys,\n      addonsChips: addonsChips,\n      maxAddons: maxAddons\n    }\n  };\n};\n\nexport const setRecaveAction = () => {\n  return{\n    type : SETRECAVE\n  };\n};\n\nexport const changeMinchipColorAction = () => {\n  return{\n    type : DATACOLORMINCHIP\n  };\n};\n\nexport const changePickerColorAction = () => {\n  return{\n    type : DATACOLORPICKER\n  };\n};","export const isMultipleTwentyFive = (chips) => {\n  let multiple = Math.ceil(chips/25) * 25;\n  return multiple;\n};\n\nexport const totalChipsPerPlayer = (props) => {\n  let totalChipsPlayers = props.nbrChipOne + props.nbrChipTwo + props.nbrChipThree + props.nbrChipFour + props.nbrChipFive;\n  return totalChipsPlayers;\n};\n\nexport const removeUnusedChips = (chipValues, minChip) => {\n  while(chipValues[0] < minChip){\n    chipValues.shift();\n  }\n}\n\nexport const setStateChips = (chipValues, chipCounts, state) => {\n  state = {...state,\n    chipOne: chipValues[0],\n    chipTwo: chipValues[1],\n    chipThree: chipValues[2],\n    chipFour: chipValues[3],\n    chipFive: chipValues[4],\n    nbrChipOne: chipCounts[0],\n    nbrChipTwo: chipCounts[1],\n    nbrChipThree: chipCounts[2],\n    nbrChipFour: chipCounts[3],\n    nbrChipFive: chipCounts[4]\n  }\n  return state;\n}\n\n\nexport const totalStack = (chipValues, chipCounts) => {\n   let totalChips = 0;\n   for(let i = 0 ; i < chipCounts.length ; i++){\n     totalChips += chipCounts[i]*chipValues[i]\n   }\n   return totalChips;\n}\n\nexport const initStackDistribution = (startingStack, minChip, state, removeUnusedChips, totalStack, setStateChips) => {\n  let chipValues = [1,5,25,100,500,1000,5000,10000,25000,100000];\n  let chipCounts = [0,0,0,0,0,0,0];\n  removeUnusedChips(chipValues, minChip);\n  let remainingChips = startingStack;\n  let chipIndex = 0;\n  while(remainingChips>0 && chipIndex < chipCounts.length-2){\n    let chipRatio = chipValues[chipIndex+1]/chipValues[chipIndex];\n    let chipMultiplier = Math.floor(10/chipRatio);\n    let currentValue = chipMultiplier*chipValues[chipIndex+1]-totalStack(chipValues,chipCounts);\n    if(currentValue>remainingChips)\n      currentValue = remainingChips;\n    chipCounts[chipIndex] = Math.floor(currentValue/chipValues[chipIndex]);\n    remainingChips = startingStack-totalStack(chipValues,chipCounts);\n    chipIndex++;\n  }\n  chipIndex = chipCounts.length-1\n  while(remainingChips>0 && chipIndex >=0){\n    chipCounts[chipIndex] += Math.floor(remainingChips/chipValues[chipIndex]);\n    remainingChips = startingStack-totalStack(chipValues,chipCounts);\n    chipIndex--;\n  }\n  state = setStateChips(chipValues, chipCounts, state);\n  return state ;\n }\n\nexport const colorChips = [{\n    value: 1,\n    colorOne: \"#b8b894\",\n    colorTwo: \"#fff\"\n  }, {\n    value: 5,\n    colorOne: \"#ff3300\",\n    colorTwo: \"#fff\"\n  }, {\n    value: 25,\n    colorOne: \"#33cc33\",\n    colorTwo: \"#fff\"\n  }, {\n    value: 100,\n    colorOne: \"#000\",\n    colorTwo: \"#fff\"\n  }, {\n    value: 500,\n    colorOne: \"#993399\",\n    colorTwo: \"#ffcc00\"\n  }, {\n    value: 1000,\n    colorOne: \"#ffcc00\",\n    colorTwo: \"#004080\"\n  }, {\n    value: 5000,\n    colorOne: \"#ff6600\",\n    colorTwo: \"#663300\"\n  }, {\n    value: 25000,\n    colorOne: \"#00ffff\",\n    colorTwo: \"#fff\"\n  }\n];\n\nexport const addonsDistributionChipcase = (addonsChips, chipValues, props) => {\n  let chipFive = 0;\n  let chipFour = 0;\n  let chipThree = 0;\n  let chipTwo = 0;\n  let chipOne = 0;\n  while(addonsChips > 0){\n    if(addonsChips - chipValues[4] >= 0){\n      addonsChips -= chipValues[4];\n      chipFive += 1;\n    } else if(addonsChips - chipValues[3] >= 0){\n      addonsChips -= chipValues[3];\n      chipFour += 1;\n    } else if(addonsChips - chipValues[2] >= 0) {\n      addonsChips -= chipValues[2];\n      chipThree += 1;\n    } else if(addonsChips - chipValues[1] >= 0){\n      addonsChips -= chipValues[1];\n      chipTwo += 1;\n    } else {\n      addonsChips -= chipValues[0];\n      chipOne += 1;\n    }\n  }\n  props = {...props,\n    nbrChipFive: chipFive,\n    nbrChipFour: chipFour,\n    nbrChipThree: chipThree,\n    nbrChipTwo: chipTwo,\n    nbrChipOne: chipOne\n  };\n  return props;\n}\n\nexport const colorUp = (nbrChip, chipValues, i, props, addons) => {\n  let colorUp = Math.ceil(((nbrChip * props.maxPlayers + nbrChip *\n    props.extraRules.maxRebuys + addons * props.extraRules.maxAddons) *\n    chipValues[i])/chipValues[i + 2]);\n  return colorUp;\n}","import React,{ Component } from 'react';\nimport { connect } from 'react-redux';\nimport \"./Parameters.css\";\nimport {\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Label,\n  Input,\n  Button,\n  FormGroup,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  Container,\n  Row,\n  Col,\n  Table\n} from 'reactstrap';\nimport Switch from 'react-switch';\nimport {\n  selectMinChipAction,\n  generatePossibleStacksAction,\n  selectStartingStackAction,\n  generateChipsetAction,\n  selectMaxPlayersAction,\n  selectMoreChipsAction,\n  selectLessChipsAction,\n  setTotalChipsetAction,\n  setExtraRulesAction,\n  setRecaveAction,\n  changeMinchipColorAction\n} from \"../../Actions/Actions\";\nimport {\n  isMultipleTwentyFive,\n  totalChipsPerPlayer,\n  removeUnusedChips,\n  addonsDistributionChipcase,\n  colorUp\n} from '../../Utils/Utils';\n\nclass Parameters extends Component {\n  constructor(){\n    super();\n    this.state = {\n      minChipOptions : [ 1, 5, 25, 100],\n      dropdownOpenMinChip: false,\n      dropdownOpenStartingStack: false,\n      checkedRecave: false,\n      maxRebuys: 0,\n      maxAddons: 0,\n      addonsChips: 0,\n      modal: false,\n      placeholder: 18\n    };\n  }\n\n  componentDidMount() {\n    this.props.handleGeneratePossibleStacks(this.props.minChip);\n    this.props.handleGenerateChipset(this.props.startingStack, this.props.minChip);\n    this.setState({ \n      maxRebuys: Math.floor(this.props.maxPlayers * 1.25),\n      maxAddons: Math.floor(this.props.maxPlayers * 0.75),\n      addonsChips: Math.floor(this.props.startingStack * 1.5),\n    }, () => {\n      this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n    });\n  }\n\n  totalChipset = (props) => {\n    let chipValues = [1,5,25,100,500,1000,5000,10000,25000,100000];\n    removeUnusedChips(chipValues, props.minChip);\n    if(this.state.checkedRecave) {\n      let addons = addonsDistributionChipcase(props.extraRules.addonsChips, chipValues, props);\n      let totalChipset =\n      isMultipleTwentyFive(props.nbrChipOne * props.maxPlayers + props.nbrChipOne * props.extraRules.maxRebuys + addons.nbrChipOne * props.extraRules.maxAddons + colorUp(props.nbrChipOne, chipValues, 0, props, addons.nbrChipOne)) +\n      isMultipleTwentyFive(props.nbrChipTwo * props.maxPlayers + props.nbrChipTwo * props.extraRules.maxRebuys + addons.nbrChipTwo * props.extraRules.maxAddons + colorUp(props.nbrChipTwo, chipValues, 1, props, addons.nbrChipTwo)) +\n      isMultipleTwentyFive(props.nbrChipThree * props.maxPlayers + props.nbrChipThree * props.extraRules.maxRebuys + addons.nbrChipThree * props.extraRules.maxAddons + colorUp(props.nbrChipThree, chipValues, 2, props, addons.nbrChipThree)) +\n      isMultipleTwentyFive(props.nbrChipFour * props.maxPlayers + props.nbrChipFour * props.extraRules.maxRebuys + addons.nbrChipFour * props.extraRules.maxAddons + colorUp(props.nbrChipFour, chipValues, 3, props, addons.nbrChipFour)) +\n      isMultipleTwentyFive(props.nbrChipFive * props.maxPlayers + props.nbrChipFive * props.extraRules.maxRebuys + addons.nbrChipFive * props.extraRules.maxAddons + colorUp(props.nbrChipFive, chipValues, 4, props, addons.nbrChipFive));\n      this.props.setTotalChipset(totalChipset);\n      return totalChipset;\n    } else {\n      let totalChipset = \n      isMultipleTwentyFive(props.nbrChipOne * props.maxPlayers + colorUp(props.nbrChipOne, chipValues, 0, props, 0)) +\n      isMultipleTwentyFive(props.nbrChipTwo * props.maxPlayers + colorUp(props.nbrChipTwo, chipValues, 1, props, 0)) +\n      isMultipleTwentyFive(props.nbrChipThree * props.maxPlayers + colorUp(props.nbrChipThree, chipValues, 2, props, 0)) +\n      isMultipleTwentyFive(props.nbrChipFour * props.maxPlayers + colorUp(props.nbrChipFour, chipValues, 3, props, 0)) +\n      isMultipleTwentyFive(props.nbrChipFive * props.maxPlayers + colorUp(props.nbrChipFive, chipValues, 4, props, 0));\n      this.props.setTotalChipset(totalChipset);\n      return totalChipset;\n    }\n  }\n\n  toggleModal = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  toggleMinChipInput = () => {\n    this.setState(prevState => ({\n      dropdownOpenMinChip: !prevState.dropdownOpenMinChip\n    }));\n  }\n\n  toggleStartingStackInput = () => {\n    this.setState(prevState => ({\n      dropdownOpenStartingStack: !prevState.dropdownOpenStartingStack\n    }));\n  }\n\n  handleChangeChips = (e) => {\n    this.setState({ addonsChips: Math.floor(Number(e.target.value) * 1.5)},() => {\n      this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n    });\n    this.props.handleChangeStartingStack(Number(e.target.value), this.props.minChip);\n    this.props.handleGenerateChipset(Number(e.target.value), this.props.minChip);\n  }\n\n  handleGenerateStacks = (e) => {\n    this.setState({ addonsChips: Math.floor(Number(e.target.value) * 600)}, () => {\n      this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n    });\n    this.props.handleChangeMinChip(Number(e.target.value));\n    this.props.handleGeneratePossibleStacks(Number(e.target.value));\n    this.props.handleGenerateChipset((Number(e.target.value)) * 400, Number(e.target.value));\n    this.props.handleChangeColorMinChip();\n  }\n\n  changeMaxPlayers = (e) => {\n    if(Number(e.target.value) >= 0 && Number(e.target.value) <= 5000 ){\n      this.props.handleChangeMaxPlayers(Number(e.target.value));\n      this.setState({ \n        maxRebuys: Math.floor(Number(e.target.value) * 1.25),\n        maxAddons: Math.floor(Number(e.target.value) * 0.75),\n        addonsChips: Math.floor(this.props.startingStack * 1.5),\n        placeholder: null\n      }, () => {\n        this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n      });\n    }\n  }\n\n  changeMaxRebuys = (e) => {\n    if(e.target.value >= 0 && e.target.value <= 5000 ){\n      this.props.handleChangeMaxRebuys(e.target.value);\n    }\n  }\n\n  handleChangeRecave = (checked) => {\n    this.setState({ checkedRecave : checked });\n    this.props.setRecave();\n  }\n\n  handleChangeMaxRebuys = (e) => {\n    if(e.target.value >= 0 && e.target.value <= 5000 ){\n      this.setState({ maxRebuys: e.target.value }, () => {\n        this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n      });\n    }\n  }\n\n  handleChangeMaxRebuysValue = () => {\n    this.setState({\n      maxRebuys: \"\"\n    });\n  }\n\n  handleChangeMaxAddonsValue = () => {\n    this.setState({\n      maxAddons: \"\"\n    });\n  }\n\n  handleChangeAddonsChipsValue = () => {\n    this.setState({\n      addonsChips: \"\"\n    });\n  }\n\n  handleChangeMaxAddons = (e) => {\n    if(e.target.value >= 0 && e.target.value <= 5000 ){\n      this.setState({ maxAddons: e.target.value }, () => {\n        this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n      });\n    }\n  }\n\n  handleChangeAddonsChips = (e) => {\n    this.setState({ addonsChips: e.target.value }, () => {\n      this.props.setExtraRules(this.state.maxRebuys, this.state.addonsChips, this.state.maxAddons);\n    });\n  }\n\n  isInputNumber (e) {\n    let char = String.fromCharCode(e.which);\n    if(!(/[0-9]/.test(char))) {\n      e.preventDefault();\n    }\n  }\n\n  render() {\n    return (\n      <Container className=\"h-100\">\n        <Row className=\"title\">\n          <Col md={12} className=\"mt-1\">\n            <h6 className=\"text-uppercase\">Tournament Parameters</h6>\n          </Col>\n        </Row>\n        <Row className=\"mt-4 d-flex justify-content-end\">\n          <Col xs={6} md={6}>\n            {this.state.checkedRecave ?\n              <Label for=\"extra-rules\" className=\"extra-rules\">\n                Rebuys\n              </Label>\n              :\n              <Label for=\"extra-rules\" className=\"text-uppercase selection mt-1\">\n                Rebuys \n              </Label>}\n          </Col>\n        </Row>\n        <Row className=\"mt-4 d-flex justify-content-end\">\n          <Col xs={6} md={6}>\n            <Label htmlFor=\"recave-button\">\n              <Switch\n                checked={this.state.checkedRecave}\n                onChange={this.handleChangeRecave}\n                onColor=\"#f87515\"\n                onHandleColor=\"#fff\"\n                handleDiameter={22}\n                uncheckedIcon={false}\n                checkedIcon={false}\n                boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n                activeBoxShadow=\"0px 0px 1px 10px rgba(0, 0, 0, 0.2)\"\n                height={20}\n                width={45}\n                className=\"react-switch float-right\"\n                id=\"recave-button\"\n              />\n            </Label>\n          </Col>\n        </Row>\n        <Row className=\"mt-3\">\n          <Col xs={6} md={6}>\n            <FormGroup className=\"mb-0\">\n              <Label for=\"maxPlayers\" className=\"selection\">1. Max Players</Label>\n              <Input\n                type=\"text\"\n                onKeyPress={this.isInputNumber}\n                name=\"maxPlayers\"\n                id=\"maxPlayers\"\n                className=\"parameters-inputs dropdown\"\n                onChange={this.changeMaxPlayers}\n                placeholder={this.state.placeholder}\n                onClick={this.changeMaxPlayers}\n              />\n            </FormGroup>\n            <p className=\"selection\">2. Minimum Chip</p>\n            <Dropdown  size=\"sm\" isOpen={this.state.dropdownOpenMinChip} toggle={this.toggleMinChipInput}>\n              <DropdownToggle caret className=\"parameters-inputs\">\n                {this.props.minChip}\n              </DropdownToggle>\n              <DropdownMenu>\n                {this.state.minChipOptions.map((chip, index) => {\n                  return <DropdownItem key={index} value={chip} onClick={this.handleGenerateStacks}>{chip}</DropdownItem>\n                })}\n              </DropdownMenu>\n            </Dropdown>\n            <p className=\"selection mt-2\">3. Starting Stack</p>\n            <Dropdown size=\"sm\" isOpen={this.state.dropdownOpenStartingStack} toggle={this.toggleStartingStackInput}>\n              <DropdownToggle caret className=\"parameters-inputs\">\n                {this.props.startingStack}\n              </DropdownToggle>\n              <DropdownMenu modifiers={{ setMaxHeight: { enabled: true, order: 890,\n                fn: (data) => {\n                  return {...data, styles: {...data.styles, overflow: 'auto', maxHeight: 100, },\n                      };\n                    },\n                  },\n                }}>\n                {this.props.possibleStack.map((stack, index) => {\n                  return <DropdownItem key={index} value={stack} onClick={this.handleChangeChips}>{stack}</DropdownItem>\n                })}\n              </DropdownMenu>\n            </Dropdown>\n          </Col>\n          <Col xs={6} md={6} id=\"disabled\">\n            <FormGroup className=\"mb-0\">\n              <Label for=\"maxRebuys\" className=\"selection\">4. Max Rebuys</Label>\n              <Input \n                className={`${this.state.checkedRecave ? \"parameters-inputs\" : \"recave-false\"} dropdown`}\n                type=\"text\"\n                onKeyPress={this.isInputNumber}\n                name=\"maxRebuys\"\n                id=\"maxRebuys\"\n                onChange={this.handleChangeMaxRebuys}\n                value={this.state.checkedRecave ? this.state.maxRebuys : 0}\n                disabled={this.state.checkedRecave ? false : true}\n                onClick={this.handleChangeMaxRebuysValue}\n              />\n            </FormGroup>\n            <FormGroup className=\"mb-0\">\n              <Label for=\"maxAddons\" className=\"selection\">5. Max Addons</Label>\n              <Input \n                className={`${this.state.checkedRecave ? \"parameters-inputs\" : \"recave-false\"} dropdown`}\n                type=\"text\"\n                onKeyPress={this.isInputNumber}\n                name=\"maxAddons\"\n                id=\"maxAddons\"\n                onChange={this.handleChangeMaxAddons}\n                value={this.state.checkedRecave ? this.state.maxAddons : 0}\n                disabled={this.state.checkedRecave ? false : true}\n                onClick={this.handleChangeMaxAddonsValue}\n              />\n            </FormGroup>\n            <FormGroup className=\"mb-0\">\n              <Label for=\"AddonsChip\" className=\"selection\">6. Addons Chip</Label>\n              <Input\n                className={`${this.state.checkedRecave ? \"parameters-inputs\" : \"recave-false\"} dropdown`}\n                type=\"text\"\n                onKeyPress={this.isInputNumber}\n                name=\"addonsChips\"\n                id=\"addonsChips\"\n                onChange={this.handleChangeAddonsChips}\n                value={this.state.checkedRecave ? this.state.addonsChips : 0}\n                disabled={this.state.checkedRecave ? false : true}\n                onClick={this.handleChangeAddonsChipsValue}\n              />\n            </FormGroup>\n          </Col>\n        </Row>\n        <Row className=\"w-100\">\n          <Col md={12} className=\"p-0 text-center\">\n            <h6 className=\"player-stack ml-4 mt-5 mb-4\">STARTING STACK PER PLAYER</h6>\n          </Col>\n        </Row>\n        <Table dark size=\"sm\">\n          <thead>\n            <tr>\n              <th>Chip Value</th>\n              <th>Qty per player</th>\n              <th>SubTotal</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td>{this.props.chipOne}</td>\n              <td>{this.props.nbrChipOne}</td>\n              <td>{this.props.chipOne * this.props.nbrChipOne}</td>\n            </tr>\n            <tr>\n              <td>{this.props.chipTwo}</td>\n              <td>{this.props.nbrChipTwo}</td>\n              <td>{this.props.chipTwo * this.props.nbrChipTwo}</td>\n            </tr>\n            <tr>\n              <td>{this.props.chipThree}</td>\n              <td>{this.props.nbrChipThree}</td>\n              <td>{this.props.chipThree * this.props.nbrChipThree}</td>\n            </tr>\n            <tr>\n              <td>{this.props.chipFour}</td>\n              <td>{this.props.nbrChipFour}</td>\n              <td>{this.props.chipFour * this.props.nbrChipFour}</td>\n            </tr>\n            <tr>\n              <td>{this.props.chipFive}</td>\n              <td>{this.props.nbrChipFive}</td>\n              <td>{this.props.chipFive * this.props.nbrChipFive}</td>\n            </tr>\n            <tr>\n              <td>Totals</td>\n              <td>{totalChipsPerPlayer(this.props)}</td>\n              <td>{this.props.startingStack}</td>\n            </tr>\n          </tbody>\n        </Table>\n        <Row className=\"mt-3\">\n          <Col xs={4} md={4}>\n            <Button size=\"sm\" className=\"quantity-btn\" onClick={this.props.handleClickLessChips}>Less Chips</Button>\n          </Col>\n          <Col xs={4} md={4}>\n            <h5 className=\"totalChips\">TOTAL CHIPS : {this.totalChipset(this.props)}</h5>\n          </Col>\n          <Col xs={4} md={4}>\n            <Button size=\"sm\" className=\"quantity-btn\" onClick={this.props.handleClickMoreChips}>More Chips</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={12} className=\"d-flex justify-content-center mt-3\">\n            <Button className=\"d-none d-lg-block chipset-btn\" onClick={this.toggleModal}>SAMPLE PRICING</Button>\n            <Modal isOpen={this.state.modal} toggle={this.toggle} className={`modal-sm modal-border p-0 ${this.props.className}`}>\n              <ModalBody className=\"modal-core\">\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={this.toggleModal}>\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n                <p className=\"text-uppercase prices\"> Sample Prices</p>\n                <Row className=\"sample-price h-100\">\n                  <Col md={12} className=\"d-flex justify-content-between\">\n                    <p className=\"text-left\">Low quality<br/><em>Plastic Chips</em></p>\n                    <p><strong>{Math.floor(this.totalChipset(this.props) / 25 * 3.20)} €</strong></p>\n                  </Col>\n                  <Col md={12} className=\"d-flex justify-content-between\">\n                    <p className=\"text-left\">Medium<br/><em>Clay Composite</em></p>\n                    <p><strong>{Math.floor(this.totalChipset(this.props) / 25 * 5.60)} €</strong></p>\n                  </Col>\n                  <Col md={12} className=\"d-flex justify-content-between\">\n                    <p className=\"text-left\">High<br/><em>Clay</em></p>\n                    <p><strong>{Math.floor(this.totalChipset(this.props) / 25 * 6.70)} €</strong></p>\n                  </Col>\n                </Row>\n              </ModalBody>\n              <ModalFooter className=\"d-flex justify-content-center pt-3 modal-core\">\n                <div>\n                  <a href=\"https://www.cartes-production.com/fr/jetons-de-poker-c-12\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn text-uppercase\" role=\"button\">\n                    <img className=\"text-center cart-icon\" src=\"https://i.ibb.co/zGkdkDK/shopping-cart.png\" alt=\"cart\"/>\n                  </a>\n                </div>\n              </ModalFooter>\n            </Modal>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = store =>({\n  possibleStack: store.possibleStack,\n  minChip: store.settings.minChip,\n  startingStack : store.settings.startingStack,\n  maxPlayers: store.maxPlayers,\n  chipset: store.chipset,\n  nbrChipOne: store.chipset.nbrChipOne,\n  nbrChipTwo: store.chipset.nbrChipTwo,\n  nbrChipThree: store.chipset.nbrChipThree,\n  nbrChipFour: store.chipset.nbrChipFour,\n  nbrChipFive: store.chipset.nbrChipFive,\n  chipOne: store.chipset.chipOne,\n  chipTwo: store.chipset.chipTwo,\n  chipThree: store.chipset.chipThree,\n  chipFour: store.chipset.chipFour,\n  chipFive: store.chipset.chipFive,\n  extraRules: store.extraRules\n});\n\nconst mapActionsToProps = {\n  handleChangeMinChip: selectMinChipAction,\n  handleGeneratePossibleStacks: generatePossibleStacksAction,\n  handleChangeStartingStack: selectStartingStackAction,\n  handleGenerateChipset: generateChipsetAction,\n  handleChangeMaxPlayers: selectMaxPlayersAction,\n  handleClickMoreChips: selectMoreChipsAction,\n  handleClickLessChips: selectLessChipsAction,\n  setTotalChipset: setTotalChipsetAction, \n  setExtraRules: setExtraRulesAction,\n  setRecave: setRecaveAction,\n  handleChangeColorMinChip: changeMinchipColorAction\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(Parameters);","import React,{ Component } from 'react';\nimport './ColorPicker.css';\nimport { SketchPicker } from 'react-color';\nimport { enableTouchAction } from '../../Actions/Actions';\nimport { Row, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { colorChips } from '../../Utils/Utils';\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayColorPicker: [false,false,false,false,false,false,false,false,false,false],\n      indexMinChip: 0\n    };\n  }\n\n  componentDidMount() {\n    for(let y = 0 ; y < colorChips.length ; y++){\n      if(colorChips[y].value === this.props.minChip){\n        this.setState({ indexMinChip: y });\n      }\n    }\n  }\n\n  handleClickPicker = (index) => {\n    let toggle = this.state.displayColorPicker;\n    toggle[index] = true;\n    this.setState({ displayColorPicker : toggle });\n    this.props.enableSidebarTouch();\n  }\n\n  handleClosePicker = (index) => {\n    let toggle = this.state.displayColorPicker;\n    toggle[index] = false;\n    this.setState({ displayColorPicker : toggle });\n    this.props.enableSidebarTouch();\n  }\n\n  render() {\n    if(this.props.colors){\n      return(\n        <div>\n          <Row>\n            <Col>\n              <p>Clicking on each button below, you can design your chips with your favorite colors.</p>\n            </Col>\n          </Row>\n          {this.props.toggleColorPicker ?\n            <Row className=\"d-flex justify-content-center\">\n            {this.props.colors.map((color, index) => {\n              return(\n              <Col key={index} xs={2} sm={2} md={2} lg={2} id={`positionColorPicker${index}`}>\n                <div className=\"swatch\"  id={`positionColorPickerOne${index}`}>\n                  <div className=\"color\" style={color.colorOne ? {background: color.colorOne} : { background: colorChips[index + this.state.indexMinChip].colorOne}} onClick={ () => {this.handleClickPicker(index + index)} }></div>\n                </div>\n                {this.state.displayColorPicker[index+index] ?\n                <div className=\"popover\">\n                  <div className=\"cover\" onClick={ () => {this.handleClosePicker(index + index)} }></div>\n                  <SketchPicker color={color.colorOne} onChange={ (e) => {this.props.handleChangeFirstColor(e, index)} } />\n                </div>\n                : null}\n                <div className=\"swatch\" id={`positionColorPickerTwo${index}`}>\n                  <div className=\"color\" style={color.colorOne ? {background: color.colorTwo} : { background: colorChips[index + this.state.indexMinChip].colorTwo}} onClick={ () => {this.handleClickPicker(2 * index + 1)} }></div>\n                </div>\n                {this.state.displayColorPicker[2 * index + 1] ?\n                <div className=\"popover\">\n                  <div className=\"cover\" onClick={ () => {this.handleClosePicker(2 * index + 1)} }></div>\n                  <SketchPicker color={color.colorTwo} onChange={ (e) => {this.props.handleChangeSecondColor(e, index)} } />\n                </div>\n                : null}\n              </Col>\n              );\n            })}\n          </Row>\n          :\n          <Row className=\"d-flex justify-content-center\">\n            {this.props.colors.map((color, index) => {\n              return(\n              <Col className=\"px-0\" key={index} xs={2} sm={2} md={2} lg={2}>\n                <div className=\"swatch\">\n                  <div className=\"color\" style={color.colorOne ? {background: color.colorOne} : { background: colorChips[index + this.state.indexMinChip].colorOne}} onClick={ () => {this.handleClickPicker(index + index)} }></div>\n                </div>\n                {this.state.displayColorPicker[index + index] ?\n                <div className={`popoverOne${index}`}>\n                  <div className=\"cover\" onClick={ () => {this.handleClosePicker(index + index)} }></div>\n                  <SketchPicker color={color.colorOne} onChange={ (e) => {this.props.handleChangeFirstColor(e, index)} } />\n                </div>\n                : null}\n                <div className=\"swatch\">\n                  <div className=\"color\" style={color.colorOne ? {background: color.colorTwo} : { background: colorChips[index + this.state.indexMinChip].colorTwo}} onClick={ () => {this.handleClickPicker(2 * index + 1)} }></div>\n                </div>\n                {this.state.displayColorPicker[2 * index + 1] ?\n                <div className={`popoverTwo${index}`}>\n                  <div className=\"cover\" onClick={ () => {this.handleClosePicker(2 * index + 1)} }></div>\n                  <SketchPicker color={color.colorTwo} onChange={ (e) => {this.props.handleChangeSecondColor(e, index)} } />\n                </div>\n                : null}\n              </Col>\n            )\n            })}\n          </Row>\n          }\n        </div>\n      );\n    } else { \n      return null;\n    }\n  }\n}\n\nconst mapActionsToProps = {\n  enableSidebarTouch : enableTouchAction,\n}\n\nconst mapStateToProps = store => ({\n  minChip: store.settings.minChip\n})\n\nexport default connect(mapStateToProps, mapActionsToProps)(ColorPicker);","import React,{ Component } from 'react';\nimport { connect } from 'react-redux';\nimport \"./Chipcase.css\";\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport { \n  isMultipleTwentyFive, \n  removeUnusedChips, \n  addonsDistributionChipcase,\n  colorChips,\n  colorUp\n } from '../../Utils/Utils';\n import { changePickerColorAction } from '../../Actions/Actions';\n\nclass Chipcase extends Component {\n  constructor(){\n    super();\n    this.state = {\n      colors : [\n        { \n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        { \n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        { \n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        }\n      ],\n    }\n  };\n  \n  componentDidMount(){\n    this.drawCanvas(this.props);\n  }\n\n  componentWillReceiveProps(nextProps){\n    this.drawCanvas(nextProps);\n  }\n\n  drawCanvas = (props) => {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n    ctx.clearRect(0, 0 , canvas.width, canvas.height);\n\n    let chipValues = [1,5,25,100,500,1000,5000,10000,25000,100000];\n    removeUnusedChips(chipValues, props.minChip);\n\n    ctx.fillStyle = \"#c2c2a3\";\n    ctx.save();\n    ctx.fillRect(canvas.width * (5/100), canvas.height * (3/100), canvas.width * (2/100), canvas.height * (82/100));\n    ctx.fillRect(canvas.width * (5/100), canvas.height * (2/100), canvas.width * (90/100), canvas.height * (2/100));\n    ctx.fillRect(canvas.width * (94/100), canvas.height * (2/100), canvas.width * (2/100), canvas.height * (84/100));\n    ctx.fillRect(canvas.width * (5/100), canvas.height * (84/100), canvas.width * (90/100), canvas.height * (2/100));\n\n    ctx.save();\n    ctx.font = \"30px Arial\";\n    ctx.fillStyle = \"#20A6DB\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(`Total ${props.totalChipset}`, canvas.width * (54/100), canvas.height * (81/100));\n\n    let indexMinChip = 0;\n    let coinY = 14;\n    let valueY = 15;\n    let startColumn = 8;\n    let heightColumns;\n    if(props.recave){\n      let addons = addonsDistributionChipcase(props.extraRules.addonsChips, chipValues, props);\n      heightColumns = this.setRatioColumn(props, addons, chipValues);\n    } else {\n      heightColumns = this.setRatioColumn(props, 0, chipValues);\n    }\n\n    for(let y = 0 ; y < colorChips.length ; y++){\n      if(colorChips[y].value === props.minChip){\n        indexMinChip = y;\n      }\n    }\n  \n    if(props.colorData === true){\n      let box = this.state.colors;\n      for(let i = 0; i < this.state.colors.length ; i++){\n        box[i].colorOne = colorChips[i + indexMinChip].colorOne;\n        box[i].colorTwo = colorChips[i + indexMinChip].colorTwo;\n      }\n      this.setState({ colors : box });\n      for(let i = indexMinChip; i <= indexMinChip + 4 ; i++){\n        this.generateChip(ctx, `${colorChips[i].colorOne}`, `${colorChips[i].colorOne}`, `${colorChips[i].colorTwo}`, canvas.width* (52.5/100), canvas.height * (coinY/100), canvas.width * (3.6/100), canvas.width * (3.9/100));\n        this.generateChipColumn(ctx, `${colorChips[i].colorOne}`,`${colorChips[i].colorTwo}`, canvas.width * (startColumn/100), canvas.height * (83/100), heightColumns[i - indexMinChip], canvas.width*(2/100), canvas.height * (1.3/100), canvas.height * (1.5/100));\n        this.generateValue(ctx, canvas.width * (52.5/100), canvas.height * (valueY/100), `${chipValues[i - indexMinChip]}`);\n        coinY += 13; \n        valueY += 13;\n        if(i === indexMinChip + 2){\n          startColumn += 38;\n        } else {\n          startColumn += 12;\n        }\n      }\n    } else if(props.colorData === false){\n      for(let i = indexMinChip; i <= indexMinChip + 4 ; i++){\n        this.generateChip(ctx, `${this.state.colors[i - indexMinChip].colorOne}`, `${this.state.colors[i - indexMinChip].colorOne}`, `${this.state.colors[i - indexMinChip].colorTwo}`, canvas.width* (52.5/100), canvas.height * (coinY/100), canvas.width * (3.6/100), canvas.width * (3.9/100));\n        this.generateChipColumn(ctx, `${this.state.colors[i - indexMinChip].colorOne}`,`${this.state.colors[i - indexMinChip].colorTwo}`, canvas.width * (startColumn/100), canvas.height * (83/100), heightColumns[i - indexMinChip], canvas.width*(2/100), canvas.height * (1.3/100), canvas.height * (1.5/100));\n        this.generateValue(ctx, canvas.width * (52.5/100), canvas.height * (valueY/100), `${chipValues[i - indexMinChip]}`);\n        coinY += 13; \n        valueY += 13;\n        if(i === indexMinChip + 2){\n          startColumn += 38;\n        } else {\n          startColumn += 12;\n        }\n      }\n    }\n\n    if(props.recave){\n      let addons = addonsDistributionChipcase(props.extraRules.addonsChips, chipValues, props);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (15/100), `${isMultipleTwentyFive(props.nbrChipOne * props.maxPlayers + props.nbrChipOne * props.extraRules.maxRebuys + addons.nbrChipOne*props.extraRules.maxAddons + colorUp(props.nbrChipOne, chipValues, 0, props, addons.nbrChipOne))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (28/100), `${isMultipleTwentyFive(props.nbrChipTwo * props.maxPlayers + props.nbrChipTwo * props.extraRules.maxRebuys + addons.nbrChipTwo*props.extraRules.maxAddons + colorUp(props.nbrChipTwo, chipValues, 1, props, addons.nbrChipTwo))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (41/100), `${isMultipleTwentyFive(props.nbrChipThree * props.maxPlayers + props.nbrChipThree * props.extraRules.maxRebuys + addons.nbrChipThree*props.extraRules.maxAddons + colorUp(props.nbrChipThree, chipValues, 2, props, addons.nbrChipThree))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (54/100), `${isMultipleTwentyFive(props.nbrChipFour * props.maxPlayers + props.nbrChipFour * props.extraRules.maxRebuys + addons.nbrChipFour*props.extraRules.maxAddons + colorUp(props.nbrChipFour, chipValues, 3, props, addons.nbrChipFour))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (67/100), `${isMultipleTwentyFive(props.nbrChipFive * props.maxPlayers + props.nbrChipFive * props.extraRules.maxRebuys + addons.nbrChipFive*props.extraRules.maxAddons + colorUp(props.nbrChipFive, chipValues, 4, props, addons.nbrChipFive))}`);\n    } else {\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (15/100), `${isMultipleTwentyFive(props.nbrChipOne * props.maxPlayers + colorUp(props.nbrChipOne, chipValues, 0, props, 0))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (28/100), `${isMultipleTwentyFive(props.nbrChipTwo * props.maxPlayers + colorUp(props.nbrChipTwo, chipValues, 1, props, 0))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (41/100), `${isMultipleTwentyFive(props.nbrChipThree * props.maxPlayers + colorUp(props.nbrChipThree, chipValues, 2, props, 0))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (54/100), `${isMultipleTwentyFive(props.nbrChipFour * props.maxPlayers + colorUp(props.nbrChipFour, chipValues, 3, props, 0))}`);\n      this.generateNrValue(ctx, canvas.width * (62.5/100), canvas.height * (67/100), `${isMultipleTwentyFive(props.nbrChipFive * props.maxPlayers + colorUp(props.nbrChipFive, chipValues, 4, props, 0))}`);\n    }\n  }\n\n  generateChipColumn = (ctx, color1, color2, x, y, height, widthPixel, heightPixel, heightChips) => {\n    for(let i = 1; i <= height; i++) {\n      if(i % 2 === 0){\n        ctx.fillStyle = color1;\n        ctx.save();\n        ctx.fillRect(x + widthPixel, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillRect(x + widthPixel * 3, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillStyle = color2;\n        ctx.save();\n        ctx.fillRect(x, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillRect(x + widthPixel * 2, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillRect(x + widthPixel * 4, y - heightChips * i, widthPixel, heightPixel);\n      } else {\n        ctx.fillStyle = color2;\n        ctx.save();\n        ctx.fillRect(x + widthPixel, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillRect(x + widthPixel * 3, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillStyle = color1;\n        ctx.save();\n        ctx.fillRect(x, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillRect(x + widthPixel * 2, y - heightChips * i, widthPixel, heightPixel);\n        ctx.fillRect(x + widthPixel * 4, y - heightChips * i, widthPixel, heightPixel);\n      }\n    }\n  }\n\n  generateValue = (ctx, positionX, positionY, value) => {\n    ctx.font = \"20px Arial\";\n    ctx.fillStyle = \"#fff\";\n    ctx.textAlign = \"center\";\n    if(Number(value) >= 1000){\n      value = (Number(value/1000)).toString() + \"K\";\n      ctx.fillText(value, positionX, positionY);\n    } else {\n      ctx.fillText(value, positionX, positionY);\n    }\n  }\n\n  generateNrValue = (ctx, positionX, positionY, value) => {\n    ctx.font = \"20px Arial\";\n    ctx.fillStyle = \"#fff\";\n    ctx.textAlign = \"center\";\n    ctx.fillText(`X ${value}`, positionX, positionY);\n  }\n\n  generateChip = (ctx, color1, color2, color3, startPosition, startPosition2, rayCircle, rayBorder) => {\n    this.generateChipCenter(ctx, color1, startPosition, startPosition2, rayCircle);\n\n    this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 1.5, 1.7);\n    this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 1.9, 0.1);\n    this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 0.3, 0.5);\n    this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 0.7, 0.9);\n    this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 1.1, 1.3);\n\n    this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 1.7, 1.9);\n    this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 0.1, 0.3);\n    this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 0.5, 0.7);\n    this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 0.9, 1.1);\n    this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 1.3, 1.5);\n  }\n\n  generateFirstBorderColor = (ctx, color2, startPosition, startPosition2, rayBorder, startBorder, endBorder) => {\n    ctx.beginPath();\n    ctx.strokeStyle = color2;\n    ctx.arc(startPosition, startPosition2, rayBorder, Math.PI * startBorder, Math.PI * endBorder);\n    ctx.lineWidth = 7;\n    ctx.stroke();\n  }\n\n  generateSecondBorderColor = (ctx, color3, startPosition, startPosition2, rayBorder, startBorder, endBorder) => {\n    ctx.beginPath();\n    ctx.strokeStyle = color3;\n    ctx.arc(startPosition, startPosition2, rayBorder, Math.PI * startBorder, Math.PI * endBorder);\n    ctx.lineWidth = 7;\n    ctx.stroke();\n  }\n\n  generateChipCenter = (ctx, color1, startPosition, startPosition2, rayCircle) => {\n    ctx.beginPath(); \n    ctx.arc(startPosition, startPosition2, rayCircle, 0, Math.PI * 2, true);\n    ctx.fillStyle = color1;\n    ctx.fill();\n    ctx.closePath();\n  }\n\n  handleChangeFirstColor = (e, index) => {\n    let color = this.state.colors;\n    color[index].colorOne = e.hex;\n    this.setState({ colors: color },() => {\n      this.drawCanvas(this.props);\n    })\n    this.props.handleChangeColorDataPicker();\n  }\n\n  handleChangeSecondColor = (e, index) => {\n    let color = this.state.colors;\n    color[index].colorTwo = e.hex;\n    this.setState({ colors: color },() => {\n      this.drawCanvas(this.props);\n    })\n    this.props.handleChangeColorDataPicker();\n  }\n\n  setRatioColumn = (props, addons, chipValues) => {\n    let chipCounts = [];\n    if(addons === 0){\n      chipCounts = [\n        isMultipleTwentyFive(props.nbrChipOne * props.maxPlayers + colorUp(props.nbrChipOne, chipValues, 0, props, 0)),\n        isMultipleTwentyFive(props.nbrChipTwo * props.maxPlayers + colorUp(props.nbrChipTwo, chipValues, 1, props, 0)), \n        isMultipleTwentyFive(props.nbrChipThree * props.maxPlayers + colorUp(props.nbrChipThree, chipValues, 2, props, 0)), \n        isMultipleTwentyFive(props.nbrChipFour * props.maxPlayers + colorUp(props.nbrChipFour, chipValues, 3, props, 0)), \n        isMultipleTwentyFive(props.nbrChipFive * props.maxPlayers + colorUp(props.nbrChipFive, chipValues, 4, props, 0))\n      ];\n    } else { \n      chipCounts = [\n        isMultipleTwentyFive(props.nbrChipOne * props.maxPlayers + props.nbrChipOne * props.extraRules.maxRebuys + addons.nbrChipOne * props.extraRules.maxAddons + colorUp(props.nbrChipOne, chipValues, 0, props, addons.nbrChipOne)),\n        isMultipleTwentyFive(props.nbrChipTwo * props.maxPlayers + props.nbrChipTwo * props.extraRules.maxRebuys + addons.nbrChipTwo * props.extraRules.maxAddons + colorUp(props.nbrChipTwo, chipValues, 1, props, addons.nbrChipTwo)), \n        isMultipleTwentyFive(props.nbrChipThree * props.maxPlayers + props.nbrChipThree * props.extraRules.maxRebuys + addons.nbrChipThree * props.extraRules.maxAddons + colorUp(props.nbrChipThree, chipValues, 2, props, addons.nbrChipThree)), \n        isMultipleTwentyFive(props.nbrChipFour * props.maxPlayers + props.nbrChipFour * props.extraRules.maxRebuys + addons.nbrChipFour * props.extraRules.maxAddons + colorUp(props.nbrChipFour, chipValues, 3, props, addons.nbrChipFour)), \n        isMultipleTwentyFive(props.nbrChipFive * props.maxPlayers + props.nbrChipFive * props.extraRules.maxRebuys + addons.nbrChipFive * props.extraRules.maxAddons + colorUp(props.nbrChipFive, chipValues, 4, props, addons.nbrChipFive))\n      ];\n    }\n    let biggestPile = 0;\n    let index = 0;\n    let heightColumn = [0,0,0,0,0];\n    for( let i = 0 ; i < chipCounts.length ; i++){\n      if(biggestPile <= chipCounts[i]){\n        biggestPile = chipCounts[i];\n        index = i;\n      }\n    }\n    for(let y = 0 ; y < chipCounts.length ; y++){\n      if(y === index && biggestPile !== 0){\n        heightColumn[index] = 50;\n      } else {\n        heightColumn[y] = Math.ceil(((chipCounts[y]/chipCounts[index]) * 100)/2);\n      }\n    }\n    return heightColumn;\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"d-none d-lg-block\">\n          <ColorPicker\n            toggleColorPicker={true}\n            handleChangeFirstColor={this.handleChangeFirstColor}\n            handleChangeSecondColor={this.handleChangeSecondColor}\n            colors={this.state.colors}\n          />\n        </div>\n        <div className=\"canvas d-none d-lg-block\">\n          <canvas ref=\"canvas\" width={window.clientWidth} height={window.clientHeight}></canvas>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = store =>({\n  nbrChipOne: store.chipset.nbrChipOne,\n  nbrChipTwo: store.chipset.nbrChipTwo,\n  nbrChipThree: store.chipset.nbrChipThree,\n  nbrChipFour: store.chipset.nbrChipFour,\n  nbrChipFive: store.chipset.nbrChipFive,\n  chipOne: store.chipset.chipOne,\n  chipTwo: store.chipset.chipTwo,\n  chipThree: store.chipset.chipThree,\n  chipFour: store.chipset.chipFour,\n  chipFive: store.chipset.chipFive,\n  maxPlayers: store.maxPlayers,\n  minChip: store.settings.minChip,\n  colorChips: store.colorChips,\n  totalChipset: store.totalChipset,\n  extraRules: store.extraRules,\n  recave: store.recave,\n  colorData: store.colorData\n});\n\nconst mapActionToProps ={\n  handleChangeColorDataPicker: changePickerColorAction\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(Chipcase);","import React,{ Component } from 'react';\nimport './Navigation.css';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport { Link } from \"react-router-dom\";\n\nclass Navigation extends Component {\n\n  render() {\n    return(\n      <div className=\"w-100\">\n        <Navbar tag=\"div\" light expand=\"md\">\n          <NavbarBrand tag=\"div\">\n            <Link className=\"link-home\" to=\"/\">Chipset Builder</Link>\n          </NavbarBrand>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default Navigation;","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport './ChipsetComponent.css';\nimport { \n  isMultipleTwentyFive, \n  removeUnusedChips, \n  addonsDistributionChipcase,\n  colorChips,\n  colorUp\n} from '../../Utils/Utils';\nimport ColorPicker from '../ColorPicker/ColorPicker';\nimport { changePickerColorAction } from '../../Actions/Actions';\n\n\n\n class ChipsetComponent extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      colors : [\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        },\n        {\n          colorOne: \"\",\n          colorTwo: \"\"\n        }\n      ],\n    };\n  }\n\n    componentDidMount(){\n      this.drawCanvas(this.props);\n    }\n\n    componentWillReceiveProps(nextProps){\n      this.drawCanvas(nextProps);\n    }\n\n    drawCanvas = (props) => {\n      const canvas = this.refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n\n      let chipValues = [1,5,25,100,500,1000,5000,10000,25000,100000];\n      removeUnusedChips(chipValues, props.minChip);\n\n      let indexMinChip = 0;\n      let coinX = 10;\n  \n      for(let y = 0 ; y < colorChips.length ; y++){\n        if(colorChips[y].value === props.minChip){\n          indexMinChip = y;\n        }\n      }\n\n      if(props.colorData === true){\n        let box = this.state.colors;\n        for(let i = 0 ; i < this.state.colors.length ; i++){\n          box[i].colorOne = colorChips[i + indexMinChip].colorOne;\n          box[i].colorTwo = colorChips[i + indexMinChip].colorTwo;\n        }\n        this.setState({ colors : box });\n        for(let i = indexMinChip; i <= indexMinChip + 4 ; i++){\n          this.generateChipValue(ctx, `${colorChips[i].colorOne}`, `${colorChips[i].colorOne}`, `${colorChips[i].colorTwo}`, canvas.width* (coinX/100), canvas.height * (40/100), canvas.width * (7/100), canvas.width * (7.1/100));\n          coinX += 20;\n        }\n      } else if(props.colorData === false){\n        for(let i = indexMinChip; i <= indexMinChip + 4 ; i++){\n          this.generateChipValue(ctx, `${this.state.colors[i - indexMinChip].colorOne}`, `${this.state.colors[i - indexMinChip].colorOne}`, `${this.state.colors[i - indexMinChip].colorTwo}`, canvas.width* (coinX/100), canvas.height * (40/100), canvas.width * (7/100), canvas.width * (7.1/100));\n          coinX += 20;\n        }\n      }\n\n      this.generateValue(ctx, canvas.width * (10/100), canvas.height * (45/100), `${chipValues[0]}`);\n      this.generateValue(ctx, canvas.width * (30/100), canvas.height * (45/100), `${chipValues[1]}`);\n      this.generateValue(ctx, canvas.width * (50/100), canvas.height * (45/100), `${chipValues[2]}`);\n      this.generateValue(ctx, canvas.width * (70/100), canvas.height * (45/100), `${chipValues[3]}`);\n      this.generateValue(ctx, canvas.width * (90/100), canvas.height * (45/100), `${chipValues[4]}`);\n\n      if(props.recave){\n        let addons = addonsDistributionChipcase(props.extraRules.addonsChips, chipValues, props);\n        this.generateNrValue(ctx, canvas.width * (10/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipOne*props.maxPlayers + props.nbrChipOne*props.extraRules.maxRebuys + addons.nbrChipOne*props.extraRules.maxAddons + colorUp(props.nbrChipOne, chipValues, 0, props, addons.nbrChipOne))}`);\n        this.generateNrValue(ctx, canvas.width * (30/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipTwo*props.maxPlayers + props.nbrChipTwo*props.extraRules.maxRebuys + addons.nbrChipTwo*props.extraRules.maxAddons + colorUp(props.nbrChipTwo, chipValues, 1, props, addons.nbrChipTwo))}`);\n        this.generateNrValue(ctx, canvas.width * (50/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipThree*props.maxPlayers + props.nbrChipThree*props.extraRules.maxRebuys + addons.nbrChipThree*props.extraRules.maxAddons + colorUp(props.nbrChipThree, chipValues, 2, props, addons.nbrChipThree))}`);\n        this.generateNrValue(ctx, canvas.width * (70/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipFour*props.maxPlayers + props.nbrChipFour*props.extraRules.maxRebuys + addons.nbrChipFour*props.extraRules.maxAddons + colorUp(props.nbrChipFour, chipValues, 3, props, addons.nbrChipFour))}`);\n        this.generateNrValue(ctx, canvas.width * (90/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipFive*props.maxPlayers + props.nbrChipFive*props.extraRules.maxRebuys + addons.nbrChipFive*props.extraRules.maxAddons + colorUp(props.nbrChipFive, chipValues, 4, props, addons.nbrChipFive))}`);\n      } else {\n        this.generateNrValue(ctx, canvas.width * (10/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipOne*props.maxPlayers + colorUp(props.nbrChipOne, chipValues, 0, props, 0))}`);\n        this.generateNrValue(ctx, canvas.width * (30/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipTwo*props.maxPlayers + colorUp(props.nbrChipTwo, chipValues, 1, props, 0))}`);\n        this.generateNrValue(ctx, canvas.width * (50/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipThree*props.maxPlayers + colorUp(props.nbrChipThree, chipValues, 2, props, 0))}`);\n        this.generateNrValue(ctx, canvas.width * (70/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipFour*props.maxPlayers + colorUp(props.nbrChipFour, chipValues, 3, props, 0))}`);\n        this.generateNrValue(ctx, canvas.width * (90/100), canvas.height * (98/100), `${isMultipleTwentyFive(props.nbrChipFive*props.maxPlayers + colorUp(props.nbrChipFive, chipValues, 4, props, 0))}`);\n      }\n  }\n\n    generateFirstBorderColor = (ctx, color2, startPosition, startPosition2, rayBorder, startBorder, endBorder) => {\n      ctx.beginPath();\n      ctx.strokeStyle = color2;\n      ctx.arc(startPosition, startPosition2, rayBorder, Math.PI * startBorder, Math.PI * endBorder);\n      ctx.lineWidth = 4;\n      ctx.stroke();\n    }\n  \n    generateSecondBorderColor = (ctx, color3, startPosition, startPosition2, rayBorder, startBorder, endBorder) => {\n      ctx.beginPath();\n      ctx.strokeStyle = color3;\n      ctx.arc(startPosition, startPosition2, rayBorder, Math.PI * startBorder, Math.PI * endBorder);\n      ctx.lineWidth = 4;\n      ctx.stroke();\n    }\n  \n    generateChipCenter = (ctx, color1, startPosition, startPosition2, rayCircle) => {\n      ctx.beginPath();\n      ctx.arc(startPosition, startPosition2, rayCircle, 0, Math.PI * 2, true);\n      ctx.fillStyle = color1;\n      ctx.fill();\n      ctx.closePath();\n  }\n\n\n    generateValue = (ctx, positionX, positionY, value) => {\n      ctx.font = \"15px Arial\";\n      ctx.fillStyle = \"#fff\";\n      ctx.textAlign = \"center\";\n      if(Number(value) >= 1000){\n        value = (Number(value/1000)).toString() + \"K\";\n        ctx.fillText(value, positionX, positionY);\n      } else {\n        ctx.fillText(value, positionX, positionY);\n      }\n    }\n\n    generateNrValue = (ctx, positionX, positionY, value) => {\n      ctx.font = \"15px Arial\";\n      ctx.fillStyle = \"#fff\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(`X ${value}`, positionX, positionY);\n    }\n\n    generateChipValue = (ctx, color1, color2, color3, startPosition, startPosition2, rayCircle, rayBorder) => {\n      this.generateChipCenter(ctx, color1, startPosition, startPosition2, rayCircle);\n\n      this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 1.5, 1.7);\n      this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 1.9, 0.1);\n      this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 0.3, 0.5);\n      this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 0.7, 0.9);\n      this.generateFirstBorderColor(ctx, color2, startPosition, startPosition2, rayBorder, 1.1, 1.3);\n  \n      this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 1.7, 1.9);\n      this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 0.1, 0.3);\n      this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 0.5, 0.7);\n      this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 0.9, 1.1);\n      this.generateFirstBorderColor(ctx, color3, startPosition, startPosition2, rayBorder, 1.3, 1.5);\n    }\n\n    handleChangeFirstColor = (e, index) => {\n      let color = this.state.colors;\n      color[index].colorOne = e.hex;\n      this.setState({ colors: color },() => {\n        this.drawCanvas(this.props);\n      })\n      this.props.handleChangeColorDataPicker();\n    }\n  \n    handleChangeSecondColor = (e, index) => {\n      let color = this.state.colors;\n      color[index].colorTwo = e.hex;\n      this.setState({ colors: color },() => {\n        this.drawCanvas(this.props);\n      })\n      this.props.handleChangeColorDataPicker();\n    }\n\n  render () {\n    return (\n    <Container className=\"h-100\">\n      <Row className=\"h-100\">\n        <h6 className=\"player-stack text-uppercase\">Your tournament chipset</h6>\n        <Col md={12} className=\"canvas-phone-box\">\n          <canvas className=\"canvas-phone\" ref=\"canvas\" width={window.clientWidth} height={window.clientHeight}></canvas>\n        </Col>\n        <Col md={12} className=\"color-picker-mobile\">\n          <ColorPicker\n            toggleColorPicker={false}\n            handleChangeFirstColor={this.handleChangeFirstColor}\n            handleChangeSecondColor={this.handleChangeSecondColor}\n            colors={this.state.colors}\n          />\n        </Col>\n        <Col md={12} className=\"sample-price\">\n          <div className=\"d-flex justify-content-between\">\n            <p>Low quality<br/><em>Plastic Chips</em></p>\n            <p><strong>{Math.floor(this.props.totalChipset/25 * 3.20)} €</strong></p>\n          </div>\n          <div className=\"d-flex justify-content-between\">\n            <p className=\"text-left\">Medium<br/><em>Clay Composite</em></p>\n            <p><strong>{Math.floor(this.props.totalChipset/25 * 5.60)} €</strong></p>\n          </div>\n          <div className=\"d-flex justify-content-between\">\n            <p>High<br/><em>Clay</em></p>\n            <p><strong>{Math.floor(this.props.totalChipset/25 * 6.70)} €</strong></p>\n          </div>\n        </Col>\n        <Col md={12} className=\"total d-flex justify-content-between align-self-end w-100\">\n          <div className=\"d-flex justify-content-between\">\n            <p className=\"mr-3\">TOTAL CHIPS</p>\n            <p>{this.props.totalChipset}</p>\n          </div>\n          <div role=\"button\" onClick={() => {this.props.onSetSidebarOpen(false)}}>\n            <img className=\"return-button\" src=\"https://i.ibb.co/wrnsn5m/undo-arrow.png\" alt=\"return\"></img>\n          </div>\n        </Col>\n      </Row>\n    </Container>\n    );\n  }\n}\n\nconst mapStateToProps = store =>({\n  nbrChipOne: store.chipset.nbrChipOne,\n  nbrChipTwo: store.chipset.nbrChipTwo,\n  nbrChipThree: store.chipset.nbrChipThree,\n  nbrChipFour: store.chipset.nbrChipFour,\n  nbrChipFive: store.chipset.nbrChipFive,\n  chipOne: store.chipset.chipOne,\n  chipTwo: store.chipset.chipTwo,\n  chipThree: store.chipset.chipThree,\n  chipFour: store.chipset.chipFour,\n  chipFive: store.chipset.chipFive,\n  maxPlayers: store.maxPlayers,\n  minChip: store.settings.minChip,\n  colorChips: store.colorChips,\n  totalChipset: store.totalChipset,\n  extraRules: store.extraRules,\n  recave: store.recave,\n  colorData: store.colorData\n})\n\nconst mapActionToProps ={\n  handleChangeColorDataPicker: changePickerColorAction\n}\n\nexport default connect (mapStateToProps, mapActionToProps)(ChipsetComponent);","import React, { Component } from 'react';\nimport './ChipsetBuilder.css';\nimport { Button, Row, Col} from 'reactstrap';\nimport { connect } from 'react-redux';\n\nimport Parameters from '../Parameters/Parameters';\nimport Chipcase from '../Chipcase/Chipcase';\nimport Navigation from '../Navigation/Navigation' ;\nimport ChipsetComponent from '../ChipsetComponent/ChipsetComponent';\nimport Sidebar from 'react-sidebar';\n\nclass ChipsetBuilder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      sidebarOpen: false,\n    };\n  }\n\n  onSetSidebarOpen = (open) => {\n    this.setState({ sidebarOpen: open });\n  }\n\n  render() {\n    return (\n      <div>\n        <Sidebar\n          className=\"d-md-block d-lg-none\"\n          sidebar={(\n            <div className=\"h-100\">\n              <ChipsetComponent onSetSidebarOpen={this.onSetSidebarOpen}/>\n            </div>\n          )}\n          open={this.state.sidebarOpen}\n          onSetOpen={this.onSetSidebarOpen}\n          styles={{ sidebar: { background: '#212632', width: '100%', height: 'auto' } }}\n          touch={this.props.enableTouch}\n          >\n        <Navigation />\n        <Row>\n          <Col lg={4} md={12} className=\"p-0\">\n            <Parameters />\n            <div className=\"text-center\">\n              <Button className=\"d-xs-block d-lg-none chipset-btn mb-3\" onClick={() => this.onSetSidebarOpen(true)}>\n                SAMPLE PRICING\n              </Button>\n            </div>\n          </Col>\n          <Col lg={8}>\n            <Chipcase />\n          </Col>\n        </Row>\n        </Sidebar>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = store =>({\n  enableTouch: store.enabletouch\n})\n\nexport default connect (mapStateToProps)(ChipsetBuilder);","import React, { Component } from 'react';\nimport './App.css';\nimport { Container } from 'reactstrap';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Home from './Components/Home/Home';\nimport ChipsetBuilder from './Components/ChipsetBuilder/ChipsetBuilder';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Router>\n        <Container fluid={true} className=\"p-0\">\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/chipsetBuilder\" component={ChipsetBuilder} />\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;","import { SELECTMINCHIP, SELECTSTARTINGSTACK  } from '../Actions/Actions';\n\nconst chipSetBuildReducer = (state = \"\", {type, payload}) => {\n  switch (type) {\n    case SELECTMINCHIP:\n      return {...state.settings, minChip : payload.minChip, startingStack: payload.minChip * 400 };\n    case SELECTSTARTINGSTACK:\n      return {...state.settings, startingStack: payload.startingStack, minChip : payload.minChip };\n    default:\n      return state;\n  }\n};\n\nexport default chipSetBuildReducer;","import { \n  GENERATECHIPSET,\n  MORECHIPS,\n  LESSCHIPS\n} from '../Actions/Actions';\nimport { \n  removeUnusedChips,\n  totalStack,\n  initStackDistribution,\n  setStateChips\n} from '../Utils/Utils';\n\nconst chipsetGenerationReducer = (state = \"\", {type, payload}) => {\n  switch (type) {\n    case GENERATECHIPSET:\n      let data = initStackDistribution(payload.startingStack, payload.minChip, state, removeUnusedChips, totalStack, setStateChips);\n      return {...state,\n        chipOne: data.chipOne,\n        chipTwo: data.chipTwo,\n        chipThree: data.chipThree,\n        chipFour: data.chipFour,\n        chipFive: data.chipFive,\n        nbrChipOne: data.nbrChipOne,\n        nbrChipTwo: data.nbrChipTwo,\n        nbrChipThree: data.nbrChipThree,\n        nbrChipFour: data.nbrChipFour,\n        nbrChipFive: data.nbrChipFive\n      };\n    case MORECHIPS:\n      let moreChips = addMoreChips(state, setStateChips);\n      return {...state,\n        chipOne: moreChips.chipOne,\n        chipTwo: moreChips.chipTwo,\n        chipThree: moreChips.chipThree,\n        chipFour: moreChips.chipFour,\n        chipFive: moreChips.chipFive,\n        nbrChipOne: moreChips.nbrChipOne,\n        nbrChipTwo: moreChips.nbrChipTwo,\n        nbrChipThree: moreChips.nbrChipThree,\n        nbrChipFour: moreChips.nbrChipFour,\n        nbrChipFive: moreChips.nbrChipFive\n      };\n    case LESSCHIPS:\n      let lessChips = removeChips(state, setStateChips);\n      return {...state,\n        chipOne: lessChips.chipOne,\n        chipTwo: lessChips.chipTwo,\n        chipThree: lessChips.chipThree,\n        chipFour: lessChips.chipFour,\n        chipFive: lessChips.chipFive,\n        nbrChipOne: lessChips.nbrChipOne,\n        nbrChipTwo: lessChips.nbrChipTwo,\n        nbrChipThree: lessChips.nbrChipThree,\n        nbrChipFour: lessChips.nbrChipFour,\n        nbrChipFive: lessChips.nbrChipFive\n      };\n    default:\n      return state;\n  }\n}\n\nfunction getChipValueArray(state) {\n  let chipValues = [];\n  chipValues.push(state.chipOne);\n  chipValues.push(state.chipTwo);\n  chipValues.push(state.chipThree);\n  chipValues.push(state.chipFour);\n  chipValues.push(state.chipFive);\n  return chipValues;\n}\n\nfunction getChipCountArray(state) {\n  let chipCounts = [];\n  chipCounts.push(state.nbrChipOne);\n  chipCounts.push(state.nbrChipTwo);\n  chipCounts.push(state.nbrChipThree);\n  chipCounts.push(state.nbrChipFour);\n  chipCounts.push(state.nbrChipFive);\n  return chipCounts;\n}\n\nfunction setTargetPile(target, chipCounts) {\n  let index = 0;\n  if(target === \"biggestMore\"){\n    let biggestPile = chipCounts[1];\n    for( let i = 1 ; i < chipCounts.length ; i++){\n      if(biggestPile <= chipCounts[i]){\n        biggestPile = chipCounts[i];\n        index = i;\n      }\n    }\n  } else if(target === \"biggest\"){\n    let biggestPile = chipCounts[0];\n    for( let i = 0 ; i < chipCounts.length ; i++){\n      if(biggestPile <= chipCounts[i]){\n        biggestPile = chipCounts[i];\n        index = i;\n      }\n    }\n  }\n  return index;\n}\n\nfunction columnRatio(index, chipValues, chipCounts) {\n  let ratio = chipValues[index] / chipValues[index - 1];\n  chipCounts[index - 1] += ratio;\n  chipCounts[index] -= 1;\n  return chipCounts;\n}\n\nfunction addMoreChips(state, setStateChips){\n  let chipValues = getChipValueArray(state);\n  let chipCounts = getChipCountArray(state);\n\n  let index = setTargetPile(\"biggestMore\", chipCounts);\n  if(chipCounts[4] > 0){\n    index = 4;\n    columnRatio(index, chipValues, chipCounts);\n  } else if((chipCounts[3] > 0 && chipCounts[3] > chipCounts[2]) ||\n   (chipCounts[0] > chipCounts[1] && chipCounts[3] > 0)) {\n    index = 3;\n    columnRatio(index, chipValues, chipCounts);\n  } else if(chipCounts[2] > 0 && chipCounts[0] >= 100){\n    index = 2;\n    columnRatio(index, chipValues, chipCounts);\n  } else if(chipCounts[0] < 100) {\n    columnRatio(index, chipValues, chipCounts);\n  }\n\n  state = setStateChips(chipValues, chipCounts, state);\n  return state;\n}\n\nfunction removeChips(state, setStateChips){\n  let chipValues = getChipValueArray(state);\n  let chipCounts = getChipCountArray(state);\n  let index = setTargetPile(\"biggest\", chipCounts);\n  let ratio = chipValues[index + 1] / chipValues[index];\n  let limitFirstChip = chipValues[1] / chipValues[0];\n  let limitSecondChip = (chipValues[2] - chipValues[1]) / chipValues[1];\n\n  if((index === 0 && chipCounts[index] - ratio < limitFirstChip) ||\n    (index === 1 && chipCounts[index] - ratio < limitSecondChip)){\n    if(chipCounts[0] - limitFirstChip >= limitFirstChip && \n      chipCounts[1] - limitSecondChip >= limitSecondChip){\n        chipCounts[2] += 1;\n        chipCounts[1] -= limitSecondChip;\n        chipCounts[0] -= limitFirstChip;\n    }\n  } else if(chipCounts[index] - ratio > 0){\n    chipCounts[index] -= ratio;\n    chipCounts[index + 1] += 1;\n  }\n  state = setStateChips(chipValues, chipCounts, state);\n  return state;\n}\n\nexport default chipsetGenerationReducer;","import { GENERATESTACKS } from '../Actions/Actions';\n\nconst generateStacksReducer = (state = \"\", {type, payload}) => {\n  switch (type) {\n    case GENERATESTACKS:\n      return state = setPossibleStack(payload.minChip);\n    default:\n      return state;\n  }\n};\n\nfunction setPossibleStack(minChip){\n  let interval = 0;\n  let dataStack = [];\n  if(minChip === 1){\n    interval = minChip * 25;\n  } else if(minChip === 5 || minChip === 25){\n    interval = minChip * 20;\n  } else if(minChip === 100){\n    interval = minChip * 10;\n  }\n  for(let i = minChip * 100 ; i < minChip * 1000 ; i += interval){\n    dataStack.push(i);\n  }\n  return dataStack;\n}\n\nexport default generateStacksReducer;","import { SELECTMAXPLAYERS } from '../Actions/Actions';\n\nconst maxPlayerReducer = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case SELECTMAXPLAYERS:\n      return state = payload.maxPlayers;\n    default:\n      return state;\n  }\n};\n\nexport default maxPlayerReducer;","import { ENABLETOUCH } from '../Actions/Actions';\n\nconst enableTouchReducer = (state = Boolean, { type } ) => {\n  switch (type) {\n    case ENABLETOUCH:\n      return state = !state;\n    default:\n    return state;\n  }\n}\n\nexport default enableTouchReducer;","import { TOTALCHIPSET } from '../Actions/Actions';\n\nconst setTotalReducer = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case TOTALCHIPSET:\n      return state = payload.totalChipset;\n    default:\n      return state;\n  }\n};\n\nexport default setTotalReducer;","import { SETEXTRARULES } from '../Actions/Actions';\n\nconst extraRulesReducer = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case SETEXTRARULES:\n      return {...state, maxAddons: payload.maxAddons, addonsChips: payload.addonsChips, maxRebuys: payload.maxRebuys };\n    default:\n      return state;\n  }\n};\n\nexport default extraRulesReducer;","import { SETRECAVE } from '../Actions/Actions';\n\nconst setRecaveReducer = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case SETRECAVE:\n      return state = !state;\n    default:\n      return state;\n  }\n};\n\nexport default setRecaveReducer;","import { DATACOLORMINCHIP, DATACOLORPICKER  } from '../Actions/Actions';\n\nconst changeColorDataReducer = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case DATACOLORMINCHIP:\n      return state = true;\n    case DATACOLORPICKER:\n      return state = false;\n    default:\n      return state;\n  }\n};\n\nexport default changeColorDataReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nimport chipSetBuildReducer from './Reducers/chipSetBuildReducer';\nimport chipsetGenerationReducer from './Reducers/chipsetGenerationReducer';\nimport generateStacksReducer from './Reducers/generateStacksReducer';\nimport maxPlayerReducer from './Reducers/maxPlayerReducer';\nimport enableTouchReducer from './Reducers/enableTouchReducer';\nimport setTotalReducer from './Reducers/setTotalReducer';\nimport extraRulesReducer from './Reducers/extraRulesReducer';\nimport setRecaveReducer from './Reducers/setRecaveReducer';\nimport changeColorDataReducer from './Reducers/changeColorDataReducer';\n\nconst allReducers = combineReducers({\n  settings: chipSetBuildReducer,\n  possibleStack: generateStacksReducer,\n  chipset: chipsetGenerationReducer,\n  maxPlayers: maxPlayerReducer,\n  enabletouch: enableTouchReducer,\n  totalChipset: setTotalReducer,\n  extraRules: extraRulesReducer,\n  recave: setRecaveReducer,\n  colorData: changeColorDataReducer\n});\n\nconst store = createStore(allReducers, {\n  settings: {\n    minChip: 25,\n    startingStack: 10000,\n  },\n  possibleStack: [],\n  enabletouch: true,\n  chipset: {\n    chipOne: 0,\n    chipTwo: 0,\n    chipThree: 0,\n    chipFour: 0,\n    chipFive: 0,\n    nbrChipOne: 0,\n    nbrChipTwo: 0,\n    nbrChipThree: 0,\n    nbrChipFour: 0,\n    nbrChipFive: 0,\n  },\n  extraRules: {\n    addonsChips: 0,\n    maxAddons: 0,\n    maxRebuys: 1,\n  },\n  maxPlayers: 18,\n  totalChipset: 0,\n  recave: false,\n  colorData: true\n},\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));"],"sourceRoot":""}